# The sequence of triangle numbers is generated by adding the natural numbers.
#   So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#   ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# Time to complete: 10 minutes

require_relative '../lib/util'

def triangle_number(idx)
  Util.sum((1..idx))
end

def next_divisor(num, min, max)
  (min+1...max).detect do |i|
    num % i == 0
  end
end

def number_divisors(num)
  count = 2 # 1 and num
  min = 1
  max = num
  while min = next_divisor(num, min, max)
    max = num / min
    count += 2
  end
  count
end

target_divisors = 500
current_triangle_number = 1
while number_divisors(triangle_number(current_triangle_number)) < target_divisors
  current_triangle_number += 1
end
p triangle_number(current_triangle_number)
